# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Core CI

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Bump version and push tag
      id: bump_version
      run: |
        # Extract version from .csproj file
        VERSION_PREFIX=$(grep -oP '(?<=<VersionPrefix>).*?(?=</VersionPrefix>)' ./src/Teams.ThirdPartyAppApi.csproj)
        VERSION_SUFFIX=$(grep -oP '(?<=<VersionSuffix>).*?(?=</VersionSuffix>)' ./src/Teams.ThirdPartyAppApi.csproj)
        VERSION="$VERSION_PREFIX.$VERSION_SUFFIX"

        # Bump version
        NEW_VERSION=$(echo "$VERSION" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        echo "Bumping version from $VERSION to $NEW_VERSION"

        # Update version in .csproj file
        sed -i "s/<VersionPrefix>$VERSION_PREFIX<\/VersionPrefix>/<VersionPrefix>${NEW_VERSION%.*}<\/VersionPrefix>/g" ./src/Teams.ThirdPartyAppApi.csproj
        sed -i "s/<VersionSuffix>$VERSION_SUFFIX<\/VersionSuffix>/<VersionSuffix>${NEW_VERSION##*.}<\/VersionSuffix>/g" ./src/Teams.ThirdPartyAppApi.csproj

        # Set output
        echo "::set-output name=NEW_VERSION::$NEW_VERSION"
      if: github.ref == 'refs/heads/main'

    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Bump version to ${{ steps.bump_version.outputs.NEW_VERSION }}"
        git tag v${{ steps.bump_version.outputs.NEW_VERSION }}
        git push
      if: github.ref == 'refs/heads/main'


    - name: Pack
      run: dotnet pack ./src/Teams.ThirdPartyAppApi.csproj --no-build --configuration Release --output ./artifacts
      if: github.ref == 'refs/heads/main'

    - name: Push
      run: dotnet nuget push "./artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      if: github.ref == 'refs/heads/main'

    - name: Get NuGet package name
      id: pkg
      run: echo "::set-output name=package::$(basename $(find ./artifacts -name "*.nupkg"))"
      if: github.ref == 'refs/heads/main'

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commit messages since last tag
        RELEASE_NOTES="$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s")"
        
        # Set output
        echo "::set-output name=notes::$RELEASE_NOTES"
      if: github.ref == 'refs/heads/main'

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.bump_version.outputs.NEW_VERSION }}
        release_name: Release v${{ steps.bump_version.outputs.NEW_VERSION }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false
      if: github.ref == 'refs/heads/main'
