# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Core CI

on:
  push:
    branches: ["*"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

      - name: Detect branch and set prerelease variables
        id: branch_check
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          IS_PRERELEASE="false"
          if [[ "$BRANCH_NAME" != "main" && "$GITHUB_REF" != refs/tags/v* ]]; then
            IS_PRERELEASE="true"
          fi
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Get version
        id: get_version
        run: |
          if [[ "${{ steps.branch_check.outputs.IS_PRERELEASE }}" == "true" ]]; then
            VERSION="0.8.19-${{ steps.branch_check.outputs.BRANCH_NAME }}-${GITHUB_SHA:0:7}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
          fi
          echo "NEW_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set version to tag or prerelease
        id: bump_version
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.NEW_VERSION }}
        run: |
          sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$NEW_VERSION<\/AssemblyVersion>/g" ./src/Teams.ThirdPartyAppApi.csproj
        if: always()

      - name: Pack
        run: dotnet pack ./src/Teams.ThirdPartyAppApi.csproj  --configuration Release --output ./artifacts
        if: always()

      - name: Get NuGet package name
        id: pkg
        run: echo "PACKAGENAME=$(basename $(find ./artifacts -name '*.nupkg'))" >> $GITHUB_OUTPUT
        if: always()

      - name: Generate release notes
        id: release_notes
        run: |
          RELEASE_NOTES="$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s")"
          echo  "NOTES=$RELEASE_NOTES" >> $GITHUB_OUTPUT
        if: always()

      - name: create release
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: "./artifacts/*.nupkg, ./artifacts/*.snupkg"
          body: ${{ steps.release_notes.outputs.NOTES }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.get_version.outputs.NEW_VERSION }}
          prerelease: ${{ steps.branch_check.outputs.IS_PRERELEASE }}
          draft: false
          name: Release v${{ steps.get_version.outputs.NEW_VERSION }}
          generateReleaseNotes: true
        if: always()

      - name: Push
        run: dotnet nuget push "./artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
        if: always()
