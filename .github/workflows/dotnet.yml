# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Core CI

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal

    - name: Bump version and push tag
      id: bump_version
      run: |
        # Extract version from .csproj file
        VERSION=$(grep -oP '(?<=<AssemblyVersion>).*?(?=</AssemblyVersion>)' ./src/Teams.ThirdPartyAppApi.csproj)

        # Bump version
        NEW_VERSION=$(echo "$VERSION" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
        echo "Bumping version from $VERSION to $NEW_VERSION"

        # Update version in .csproj file

        sed -i "s/<AssemblyVersion>$VERSION<\/AssemblyVersion>/<AssemblyVersion>$NEW_VERSION<\/AssemblyVersion>/g" ./src/Teams.ThirdPartyAppApi.csproj

        # Set output
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
      if: github.ref == 'refs/heads/main'

    - name: Commit and push
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Bump version to ${{ steps.bump_version.outputs.NEW_VERSION }}"
        git tag v${{ steps.bump_version.outputs.NEW_VERSION }}
        git push
      if: github.ref == 'refs/heads/main'


    - name: Pack
      run: dotnet pack ./src/Teams.ThirdPartyAppApi.csproj  --configuration Release --output ./artifacts
      if: github.ref == 'refs/heads/main'

    - name: Get NuGet package name
      id: pkg
      run: echo "PACKAGENAME=$(basename $(find ./artifacts -name '*.nupkg')) >> $GITHUB_OUTPUT"
      if: github.ref == 'refs/heads/main'

    - name: Generate release notes
      id: release_notes
      run: |
        # Get commit messages since last tag
        RELEASE_NOTES="$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s")"
        
        # Set output
        echo  "NOTES=$RELEASE_NOTES >> $GITHUB_OUTPUT"
      if: github.ref == 'refs/heads/main'

    - name: create release
      uses: ncipollo/release-action@v1.13.0
      with:
        artifacts: "./artifacts/*.nupkg, ./artifacts/*.snupkg"
        body:  ${{ steps.release_notes.outputs.NOTES }}
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: v${{ steps.bump_version.outputs.NEW_VERSION }}
        prerelease: false
        draft: false
        name: Release v${{ steps.bump_version.outputs.NEW_VERSION }}
        generateReleaseNotes: true
      if: github.ref == 'refs/heads/main'

    - name: Push
      run: dotnet nuget push "./artifacts/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      if: github.ref == 'refs/heads/main'
